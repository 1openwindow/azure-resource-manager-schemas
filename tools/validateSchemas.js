"use strict";

const chalk = require("chalk");
const path = require("path");

const utilities = require("./utilities.js");
const validator = require("./validateJSON.js");

module.exports.validateSchemas = validateSchemas;
function validateSchemas() {
    const schemasFolderPath = utilities.getSchemasFolderPath();

    const schemasToSkip = [
        '0.0.1-preview/CreateUIDefinition.CommonControl.json',
        '0.0.1-preview/CreateUIDefinition.MultiVm.json',
        '0.0.1-preview/CreateUIDefinition.ProviderControl.json',
        '0.1.0-preview/CreateUIDefinition.CommonControl.json',
        '0.1.0-preview/CreateUIDefinition.MultiVm.json',
        '0.1.0-preview/CreateUIDefinition.ProviderControl.json',
        '0.1.1-preview/CreateUIDefinition.CommonControl.json',
        '0.1.1-preview/CreateUIDefinition.MultiVm.json',
        '0.1.1-preview/CreateUIDefinition.ProviderControl.json',
        '0.1.2-preview/CreateUIDefinition.CommonControl.json',
        '0.1.2-preview/CreateUIDefinition.MultiVm.json',
        '0.1.2-preview/CreateUIDefinition.ProviderControl.json',
        '2014-04-01-preview/deploymentParameters.json',
        '2014-04-01-preview/deploymentTemplate.json',
        '2015-01-01/deploymentParameters.json',
        '2015-01-01/deploymentTemplate.json',
        '2015-10-01-preview/policyDefinition.json',
        '2016-12-01/policyDefinition.json',
        '2018-05-01/policyDefinition.json',
        '2018-05-01/subscriptionDeploymentParameters.json',
        '2018-05-01/subscriptionDeploymentTemplate.json',
        '2019-04-01/autogeneratedResources.json',
        '2019-04-01/deploymentParameters.json',
        '2019-04-01/deploymentTemplate.json',
        'common/definitions.json',
        'common/manuallyAddedResources.json',
        'common/autogeneratedResources.json',
        'viewdefinition/0.0.1-preview/ViewDefinition.json',
    ].map(p => path.resolve(`${schemasFolderPath}/${p}`));

    const schemaFilePaths = utilities.getFiles(schemasFolderPath, function (filePath) {
        return filePath.endsWith('.json') && schemasToSkip.indexOf(filePath) === -1;
    });

    const metaSchemaPaths = [
        path.join(__dirname, "ResourceMetaSchema.json"),
        "http://json-schema.org/draft-04/schema"
    ];

    const metaSchemas = [];
    for (const metaSchemaPath of metaSchemaPaths) {
        metaSchemas.push({
            path: metaSchemaPath,
            json: utilities.readJSONPath(metaSchemaPath)
        });
    }

    for (let schemaFilePathIndex = 0; schemaFilePathIndex < schemaFilePaths.length; ++schemaFilePathIndex) {
        var schemaFilePath = schemaFilePaths[schemaFilePathIndex];

        const schemaJSON = utilities.readJSONPath(schemaFilePath);

        for (const metaSchema of metaSchemas) {
            const validationResult = validator.validate(schemaJSON, metaSchema.json, schemasFolderPath);

            if (!validationResult.valid) {
                let errorMessage = "\n        Failed";
                
                for (let errorIndex = 0; errorIndex < validationResult.errors.length; ++errorIndex) {
                    const error = validationResult.errors[errorIndex];
                    errorMessage += `\n        ${errorIndex + 1}. Error at "${error.dataPath}" - ${error.message}`;
                }

                return {
                   valid: validationResult.valid,
                   schemaFilePath: schemaFilePath,
                   metaSchema: metaSchema.path,
                   message: errorMessage
                };
            }
        }
    }

    return { valid: true };
}

let validationResult = validateSchemas();
if (require.main == module) {
    if (!validationResult.valid) {
        console.log(chalk.red("validation error:"));
        console.log(chalk.red(validationResult.schemaFilePath));
        console.log(chalk.red(`Using schema: ${validationResult.metaSchema}`));
        console.log(chalk.red(validationResult.message));
    }
    else {
        console.log(chalk.green("All Passed"));
    }
}